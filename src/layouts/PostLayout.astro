---
import BaseLayout from './BaseLayout.astro';
import type { CollectionEntry } from 'astro:content';

export interface Props {
  post: CollectionEntry<'posts'>;
}

const { post } = Astro.props;
const { data, slug } = post;

const site = import.meta.env.SITE;
const canonical = new URL(`${import.meta.env.BASE_URL}posts/${slug}/`, site).toString();
const title = `${data.title} • ooo`;
const description = data.description;
const dateISO = data.pubDate.toISOString();
const updatedISO = data.updatedDate ? data.updatedDate.toISOString() : undefined;
---

<BaseLayout title={title} description={description}>
  <article class="prose prose-slate dark:prose-invert max-w-none">
    <header class="not-prose mb-6">
      <h1 class="text-3xl font-bold tracking-tight">{data.title}</h1>
      <p class="text-sm text-slate-500">
        <time datetime={dateISO}>{data.pubDate.toDateString()}</time>
        {data.updatedDate && <> • Updated <time datetime={updatedISO}>{data.updatedDate.toDateString()}</time></>}
      </p>
      {data.tags.length > 0 && (
        <ul class="mt-2 flex flex-wrap gap-2">
          {data.tags.map((t) => (
            <li class="text-xs bg-slate-100 dark:bg-slate-800 px-2 py-1 rounded">
              <a href={`${import.meta.env.BASE_URL}tags/${encodeURIComponent(t)}/`}>#{t}</a>
            </li>
          ))}
        </ul>
      )}
    </header>

    <slot />

    <script type="application/ld+json">
      {JSON.stringify({
        '@context': 'https://schema.org',
        '@type': 'Article',
        headline: data.title,
        description,
        datePublished: dateISO,
        dateModified: updatedISO ?? dateISO,
        author: { '@type': 'Person', name: 'ooo' },
        mainEntityOfPage: canonical,
        url: canonical
      })}
    </script>
  </article>
</BaseLayout>
